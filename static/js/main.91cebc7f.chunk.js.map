{"version":3,"sources":["kisspng-photographic-film-movie-camera-cinema-website-and-mobile-application-development-service-5d3fc9250ede49.9926975015644613490609.png","Deatails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Deatails","state","movieDeatils","axios","post","this","props","movieId","then","data","console","log","setState","className","src","Poster","alt","Title","Genre","Year","Director","Actors","BoxOffice","Awards","Plot","href","to","Component","App","serach","movies","onChange","e","target","name","value","getId","id","findMovies","api","Search","logo","exact","path","type","placeholder","onClick","map","m","i","key","Type","imdbID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91cebc7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kisspng-photographic-film-movie-camera-cinema-website-and-mobile-application-development-service-5d3fc9250ede49.9926975015644613490609.b7ca6374.png\";","import React, {Component} from 'react';\nimport axios from 'axios';\nimport './deatails.css';\nimport {Redirect} from 'react-router-dom';\n\nexport class Deatails extends Component {\n  state = {\n    movieDeatils: '',\n  };\n\n  componentDidMount() {\n    const api = 'https://www.omdbapi.com/?i=';\n\n    axios.post(api + this.props.movieId + '&apikey=2ffd923b').then((data) => {\n      if (data) {\n        console.log(data.data);\n        this.setState({movieDeatils: data.data});\n      } else {\n        console.log('error');\n      }\n    });\n  }\n  render() {\n    console.log(this.props.movieId);\n    return (\n      <div>\n        {this.props.movieId ? (\n          <div className=\"container mt-4\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <div className=\"row firstRow\">\n                  <div className=\"imgD col-4 p-0 text-center\">\n                    <img\n                      className=\"MovieImg\"\n                      src={this.state.movieDeatils.Poster}\n                      alt=\"no Img\"\n                    />\n                  </div>\n                  <div className=\"col-8 p-0\">\n                    <h3 className=\"text-center DTitle\">\n                      {this.state.movieDeatils.Title}\n                    </h3>\n                    <ul className=\"text-white\">\n                      <li>\n                        <span>Genre : </span>\n                        {this.state.movieDeatils.Genre}\n                      </li>\n                      <li>\n                        <span>Year : </span>\n                        {this.state.movieDeatils.Year}\n                      </li>\n                      <li>\n                        <span>Director : </span>\n                        {this.state.movieDeatils.Director}\n                      </li>\n                      <li>\n                        <span>Actors : </span>\n                        {this.state.movieDeatils.Actors}\n                      </li>\n                      <li>\n                        <span>BoxOffice : </span>\n                        {this.state.movieDeatils.BoxOffice}\n                      </li>\n                      <li>\n                        <span>Awards : </span>\n                        {this.state.movieDeatils.Awards}\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div>\n                <h3 className=\"text-white mb-0 mt-3 ml-2 polt\">Plot :</h3>\n                <p className=\"Plot text-white\">\n                  {this.state.movieDeatils.Plot}\n                </p>\n              </div>\n              <a href=\"/movie-app\">\n                <button className=\"btn btn-danger \">\n                  <i className=\"fas fa-arrow-left\"></i> Back{' '}\n                </button>\n              </a>\n            </div>\n          </div>\n        ) : (\n          <Redirect to=\"https://soheel-sayegh.github.io/movie-app\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Deatails;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Details from './Deatails';\nimport logo from './kisspng-photographic-film-movie-camera-cinema-website-and-mobile-application-development-service-5d3fc9250ede49.9926975015644613490609.png';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\n\nexport class App extends Component {\n  state = {\n    serach: 'new',\n    movies: '',\n    movieId: '',\n  };\n  onChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  };\n  getId = (e) => {\n    this.setState({movieId: e.target.id});\n  };\n  findMovies = () => {\n    const api = 'https://www.omdbapi.com/?i=tt3896198&apikey=2ffd923b';\n\n    axios.post(api + '&s=' + this.state.serach).then((data) => {\n      if (data) {\n        console.log(data.data.Search);\n        this.setState({movies: data.data.Search});\n      } else {\n        console.log('error');\n      }\n    });\n  };\n\n  componentDidMount() {\n    const api = 'https://www.omdbapi.com/?i=tt3896198&apikey=2ffd923b';\n\n    axios.post(api + '&s=' + this.state.serach).then((data) => {\n      if (data) {\n        console.log(data.data.Search);\n        this.setState({movies: data.data.Search});\n      } else {\n        console.log('error');\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"app\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"title\">\n                <div className=\"logoDiv d-flex justify-content-center align-items-center\">\n                  <img className=\"logo\" src={logo} alt=\"no logo\" />\n                  <div>\n                    <h1 className=\"logotitle\">MOVIES</h1>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <Route exact path=\"/movie-app\">\n              <div className=\"row mt-3\">\n                <div className=\"col-12 \">\n                  <div className=\"wrapper\">\n                    <input\n                      type=\"text\"\n                      onChange={this.onChange}\n                      name=\"serach\"\n                      className=\"input\"\n                      placeholder=\"What are you looking for?\"\n                    />\n                    <div className=\"searchbtn\" onClick={this.findMovies}>\n                      <i className=\"fas fa-search\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row mt-3\">\n                {this.state.movies ? (\n                  this.state.movies.map((m, i) => (\n                    <div className=\"col-lg-3 col-md-4 col-sm-6 mb-3\" key={i}>\n                      <div className=\"card\">\n                        <img\n                          className=\"card-img-top\"\n                          src={m.Poster}\n                          alt=\"no img\"\n                        />\n                        <div className=\"card-body\">\n                          <h5 className=\"card-title\">{m.Title}</h5>\n                          <p className=\"movieP mb-1\">Type: {m.Type}</p>\n                          <p className=\"movieP mb-1\">Year: {m.Year}</p>\n                          <Link\n                            to=\"/movie-app/Details\"\n                            id={m.imdbID}\n                            onClick={this.getId}\n                            className=\"btn btn-block\"\n                          >\n                            Movie Details\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <h1 className=\"noResult\">\n                    <div>\n                      <i className=\"far fa-frown-open sad\"></i>\n                    </div>\n                    {\"'\" +\n                      this.state.serach +\n                      \"' \" +\n                      'There is no Movies with this name'}\n                  </h1>\n                )}\n              </div>\n            </Route>\n            <Route exact path=\"/movie-app/Details\">\n              <Details movieId={this.state.movieId} />\n            </Route>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}